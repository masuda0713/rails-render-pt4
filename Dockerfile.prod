# syntax = docker/dockerfile:1

# .ruby-versionやGemfile.lockを元に、最新のRubyイメージを取得
ARG RUBY_VERSION=3.2.2
FROM registry.docker.com/library/ruby:$RUBY_VERSION-slim as base

# Railsアプリの作業ディレクトリを指定
WORKDIR /rails

# 本番環境の環境変数を設定
ENV RAILS_ENV="production" \
    BUNDLE_DEPLOYMENT="1" \
    BUNDLE_PATH="/usr/local/bundle" \
    BUNDLE_WITHOUT="development"


# 一時的なビルドステージを作成し、最終的なイメージサイズを削減
FROM base as build

# アプリのビルドに必要なパッケージをインストール
RUN apt-get update -qq && \
    apt-get install --no-install-recommends -y build-essential git libpq-dev libvips pkg-config

# アプリの依存関係（Gem）をインストール
COPY Gemfile Gemfile.lock ./
RUN bundle install && \
    rm -rf ~/.bundle/ "${BUNDLE_PATH}"/ruby/*/cache "${BUNDLE_PATH}"/ruby/*/bundler/gems/*/.git && \
    bundle exec bootsnap precompile --gemfile

# アプリのソースコードをコピー
COPY . .

# bootsnap をプリコンパイルし、アプリの起動を高速化
RUN bundle exec bootsnap precompile app/ lib/

# シークレットキーなしでアセットをプリコンパイル
RUN SECRET_KEY_BASE_DUMMY=1 ./bin/rails assets:precompile


# 本番環境用の最終イメージ
FROM base

# 本番環境で必要なパッケージをインストール
RUN apt-get update -qq && \
    apt-get install --no-install-recommends -y curl libvips postgresql-client && \
    rm -rf /var/lib/apt/lists /var/cache/apt/archives

# ビルドしたアーティファクト（Gemやアプリケーション）をコピー
COPY --from=build /usr/local/bundle /usr/local/bundle
COPY --from=build /rails /rails

# セキュリティのため、非rootユーザーで実行
RUN useradd rails --create-home --shell /bin/bash && \
    chown -R rails:rails db log storage tmp
USER rails:rails

# エントリーポイントスクリプトを設定（データベースの準備を行う）
ENTRYPOINT ["/rails/bin/docker-entrypoint"]

# サーバーのポートを公開（デフォルト3000番）
EXPOSE 3000

# データベースのマイグレーションとシードデータ投入後、サーバーを起動
CMD ["sh", "-c", "bundle exec rails db:migrate && bundle exec rails db:seed && bundle exec rails s -b 0.0.0.0"]

